"""
Django settings for log project.

Generated by 'django-admin startproject' using Django 2.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'zhf87o8(!$+begg^@5b(x=lkzn9=3la0znj*x!+n-*3=_s2xdi'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',

    'werkzeug_debugger_runserver',
    'django_extensions',

    'xadmin',
    'crispy_forms',
    'reversion',

    'show',
    'login'

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    # 注意顺序，即在上一个的下面
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',  # 新增 ✔

    # 'django.middleware.common.CommonMiddleware',

    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# 跨域增加忽略
CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = (
    '*'
)
CORS_ALLOW_METHODS = (
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
    'VIEW',
)
CORS_ALLOW_HEADERS = (
    'XMLHttpRequest',
    'X_FILENAME',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
)

ROOT_URLCONF = 'log.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # 'DIRS': [],

        'DIRS': [BASE_DIR + "/templates", ],  # 修改位置

        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'log.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': {

        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'log',

        # 'HOST': 'localhost',
        'HOST': '120.79.223.29',
        # 'HOST': '120.79.195.187',
        'PORT': '3306',
        'USER': 'root',
        'PASSWORD': 'new_password',

        # 下面是新加入的，严格模式
        'OPTIONS': {

            'sql_mode': 'traditional',

        },

    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

TEMPLATE_DIRS = (os.path.join(BASE_DIR, 'templates'),)

# EMAIL_HOST = 'smtp.qq.com'
# EMAIL_PORT = 25
# EMAIL_HOST_USER = 'oumingyuan@foxmail.com'  # 你的 QQ 账号
# EMAIL_HOST_PASSWORD = 'tfbrbbfsewndbjhe'
# EMAIL_USE_TLS = True  # 这里必须是 True，否则发送不成功
# EMAIL_FROM = 'oumingyuan@foxmail.com'  # 你的 QQ 账号


# EMAIL_USE_SSL = True
# EMAIL_HOST = 'smtp.qq.com'  # 如果是 163 改成 smtp.163.com
# EMAIL_PORT = 465
# EMAIL_HOST_USER = 'oumingyuan@foxmail.com'  # 帐号
# EMAIL_HOST_PASSWORD = 'tfbrbbfsewndbjhe'  # 密码
# EMAIL_FROM = EMAIL_HOST_USER

# 配置邮箱发邮件的相关功能

# # 这一项是固定的
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# # smtp服务的邮箱服务器 我用的是163
# EMAIL_HOST = 'smtp.163.com'
# # smtp服务固定的端口是25
# EMAIL_PORT = 25
# # 发送邮件的邮箱
# EMAIL_HOST_USER = '13336980260@163.com'
# # 在邮箱中设置的客户端授权密码
# EMAIL_HOST_PASSWORD = 'ming15555136971'
# # 收件人看到的发件人 <此处要和发送邮件的邮箱相同>
# EMAIL_FROM = '13336980260@163.com'
# # EMAIL_USE_TLS = True

# 配置邮箱发邮件的相关功能

# 这一项是固定的
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# smtp服务的邮箱服务器 我用的是163
EMAIL_HOST = 'smtp.163.com'
# smtp服务固定的端口是25
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = '13336980260@163.com'
# 在邮箱中设置的客户端授权密码
EMAIL_HOST_PASSWORD = 'ming15555136971'
# 收件人看到的发件人 <此处要和发送邮件的邮箱相同>
EMAIL_FROM = '13336980260@163.com'

# noinspection PyUnresolvedReferences
STATIC_ROOT = '/root/static/'
